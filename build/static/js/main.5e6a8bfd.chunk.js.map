{"version":3,"sources":["components/ContactForm/ContactForm.module.css","components/ContactList/ContactList.module.css","components/ErrorNotification/ErrorNotification.module.css","components/Filter/Filter.module.css","App.module.css","redux/listActions.js","redux/contactsOperations.js","components/ErrorNotification/ErrorNotification.js","redux/selectors.js","components/ContactForm/ContactForm.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.jsx","App.js","redux/listReducer.js","redux/store.js","index.js"],"names":["module","exports","addContactRequest","createAction","addContactSuccess","addContactError","fetchContactRequest","fetchContactSuccess","fetchContactError","removeContactRequest","removeContactSuccess","removeContactError","filterContact","addContact","name","number","dispatch","listActions","Axios","post","then","data","catch","error","fetchContact","get","removeContact","id","delete","ErrNot","contactAdded","CSSTransition","in","timeout","classNames","styles","unmountOnExit","className","container","text","state","contacts","loading","filter","items","contact","toLowerCase","includes","ContactForm","handleChange","target","setState","value","handleSubmit","event","preventDefault","props","list","some","setTimeout","this","action","onSubmit","contactForm","htmlFor","contactFormLabel","type","placeholder","onChange","contactFormBtn","Component","mapDispatchToProps","contactOperations","connect","selectors","ContactList","TransitionGroup","component","TaskList","map","e","contactListItem","onClick","deleteList","contactListBtn","contactsOperation","selectros","filterRender","listAction","appear","App","onFetchContact","isLoading","title","Filter","createReducer","payload","_","combineReducers","store","configureStore","reducer","contactsReducer","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5e6a8bfd.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactForm\":\"ContactForm_contactForm__2gbDj\",\"contactFormLabel\":\"ContactForm_contactFormLabel__35pep\",\"contactFormBtn\":\"ContactForm_contactFormBtn__3smwP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"TaskList\":\"ContactList_TaskList__36Oh3\",\"contactListItem\":\"ContactList_contactListItem__2tSyA\",\"contactListBtn\":\"ContactList_contactListBtn__126-g\",\"enter\":\"ContactList_enter__3ZDan\",\"enterActive\":\"ContactList_enterActive__2Pvyp\",\"exit\":\"ContactList_exit__1XnfU\",\"exitActive\":\"ContactList_exitActive__2arZ0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"ErrorNotification_container__Bgrc8\",\"text\":\"ErrorNotification_text__1nDvR\",\"enter\":\"ErrorNotification_enter__1e-4K\",\"enterActive\":\"ErrorNotification_enterActive__2P6S0\",\"exit\":\"ErrorNotification_exit__3yYg_\",\"exitActive\":\"ErrorNotification_exitActive__xmAHp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactFormLabel\":\"Filter_contactFormLabel__3gjEk\",\"appear\":\"Filter_appear__2B27S\",\"appearActive\":\"Filter_appearActive__klHUs\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"appear\":\"App_appear__2hjIt\",\"appearActive\":\"App_appearActive__3cUAQ\",\"title\":\"App_title__1tTwm\"};","import { createAction } from \"@reduxjs/toolkit\";\r\n\r\nconst addContactRequest = createAction(\"contacts/addRequest\");\r\nconst addContactSuccess = createAction(\"contacts/addSuccess\");\r\nconst addContactError = createAction(\"contacts/addError\");\r\n\r\nconst fetchContactRequest = createAction(\"contacts/fetchRequest\");\r\nconst fetchContactSuccess = createAction(\"contacts/fetchSuccess\");\r\nconst fetchContactError = createAction(\"contacts/fetchError\");\r\n\r\nconst removeContactRequest = createAction(\"contacts/removeRequest\");\r\nconst removeContactSuccess = createAction(\"contacts/removeSuccess\");\r\nconst removeContactError = createAction(\"contacts/removeError\");\r\n\r\nconst filterContact = createAction(\"FILTER_CONTACTS\");\r\n\r\nexport default {\r\n  addContactRequest,\r\n  addContactSuccess,\r\n  addContactError,\r\n  fetchContactRequest,\r\n  fetchContactSuccess,\r\n  fetchContactError,\r\n  removeContactRequest,\r\n  removeContactSuccess,\r\n  removeContactError,\r\n  filterContact,\r\n};\r\n","import Axios from \"axios\";\r\nimport listActions from \"./listActions.js\";\r\n\r\nconst addContact = ({ name, number }) => (dispatch) => {\r\n  dispatch(listActions.addContactRequest());\r\n\r\n  Axios.post(\"http://localhost:2000/contacts\", {\r\n    name,\r\n    number,\r\n  })\r\n    .then(({ data }) => {\r\n      dispatch(listActions.addContactSuccess(data));\r\n    })\r\n    .catch((error) => dispatch(listActions.addContactError(error)));\r\n};\r\n\r\nconst fetchContact = () => (dispatch) => {\r\n  dispatch(listActions.fetchContactRequest());\r\n\r\n  Axios.get(\"http://localhost:2000/contacts\")\r\n    .then(({ data }) => {\r\n      dispatch(listActions.fetchContactSuccess(data));\r\n    })\r\n    .catch((error) => dispatch(listActions.fetchContactError(error)));\r\n};\r\n\r\nconst removeContact = (id) => (dispatch) => {\r\n  dispatch(listActions.removeContactRequest());\r\n\r\n  Axios.delete(`http://localhost:2000/contacts/${id}`)\r\n    .then(() => {\r\n      dispatch(listActions.removeContactSuccess(id));\r\n    })\r\n    .catch((error) => dispatch(listActions.removeContactError(error)));\r\n};\r\n\r\nexport default { addContact, fetchContact, removeContact };\r\n","import React from \"react\";\r\nimport { CSSTransition } from \"react-transition-group\";\r\nimport styles from \"./ErrorNotification.module.css\";\r\n\r\nconst ErrNot = ({ contactAdded }) => {\r\n  return (\r\n    <CSSTransition\r\n      in={contactAdded}\r\n      timeout={250}\r\n      classNames={styles}\r\n      unmountOnExit\r\n    >\r\n      <div className={styles.container}>\r\n        <p className={styles.text}>Contact already declared</p>\r\n      </div>\r\n    </CSSTransition>\r\n  );\r\n};\r\nexport default ErrNot;\r\n","const getLoading = (state) => state.contacts.loading;\r\nconst getFilter = (state) => state.contacts.filter;\r\nconst getForm = (state) => state.contacts.items;\r\nconst getContactList = (state) =>\r\n  state.contacts.items.filter((contact) =>\r\n    contact.name.toLowerCase().includes(state.contacts.filter.toLowerCase())\r\n  );\r\n\r\nexport default { getLoading, getFilter, getForm, getContactList };\r\n","import React, { Component } from \"react\";\nimport styles from \"./ContactForm.module.css\";\nimport { connect } from \"react-redux\";\nimport contactOperations from \"../../redux/contactsOperations.js\";\nimport ErrNot from \"../ErrorNotification/ErrorNotification\";\nimport selectors from \"../../redux/selectors\";\n\nclass ContactForm extends Component {\n  state = {\n    name: \"\",\n    number: \"\",\n    contactAdded: false,\n  };\n\n  handleChange = ({ target }) => {\n    this.setState({\n      [target.name]: target.value,\n    });\n  };\n\n  handleSubmit = (event) => {\n    event.preventDefault();\n    const rule = this.props.list.some(\n      (contact) => contact.name === this.state.name\n    );\n    if (rule) {\n      this.setState({ contactAdded: true });\n      setTimeout(() => this.setState({ contactAdded: false }), 2000);\n      return;\n    }\n    this.props.addContact({ ...this.state });\n    this.setState({\n      name: \"\",\n      number: \"\",\n    });\n  };\n\n  render() {\n    const { name, number, contactAdded } = this.state;\n    return (\n      <>\n        <ErrNot contactAdded={contactAdded} />\n        <form\n          action=\"submit\"\n          onSubmit={this.handleSubmit}\n          className={styles.contactForm}\n        >\n          <label htmlFor=\"name\" className={styles.contactFormLabel}>\n            Name\n          </label>\n          <input\n            type=\"text\"\n            name=\"name\"\n            value={name}\n            placeholder=\"name\"\n            onChange={this.handleChange}\n          />\n          <label htmlFor=\"number\" className={styles.contactFormLabel}>\n            Number\n          </label>\n          <input\n            type=\"tel\"\n            name=\"number\"\n            placeholder=\"number\"\n            value={number}\n            onChange={this.handleChange}\n          />\n          <input\n            type=\"submit\"\n            value=\"Add contact\"\n            className={styles.contactFormBtn}\n          />\n        </form>\n      </>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  list: selectors.getForm(state),\n});\n\nconst mapDispatchToProps = {\n  addContact: contactOperations.addContact,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactForm);\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport styles from \"./ContactList.module.css\";\nimport { connect } from \"react-redux\";\nimport contactsOperation from \"../../redux/contactsOperations.js\";\nimport { CSSTransition, TransitionGroup } from \"react-transition-group\";\nimport selectros from \"../../redux/selectors\";\nclass ContactList extends Component {\n  render() {\n    return (\n      <TransitionGroup component=\"ul\" className={styles.TaskList}>\n        {this.props.list.map((e) => {\n          return (\n            <CSSTransition key={e.id} timeout={250} classNames={styles}>\n              <li className={styles.contactListItem}>\n                {e.name} : {e.number}\n                <button\n                  type=\"button\"\n                  onClick={() => this.props.deleteList(e.id)}\n                  className={styles.contactListBtn}\n                >\n                  Удалить\n                </button>\n              </li>\n            </CSSTransition>\n          );\n        })}\n      </TransitionGroup>\n    );\n  }\n}\n\nContactList.propTypes = {\n  deleteList: PropTypes.func.isRequired,\n  list: PropTypes.array.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  list: selectros.getContactList(state),\n});\n\nconst mapDispatchToProps = {\n  deleteList: contactsOperation.removeContact,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport styles from \"./Filter.module.css\";\nimport { CSSTransition } from \"react-transition-group\";\nimport { connect } from \"react-redux\";\nimport listAction from \"../../redux/listActions.js\";\nimport selectors from \"../../redux/selectors\";\n\nconst FilterName = ({ filterRender, filter }) => (\n  <CSSTransition\n    in={true}\n    appear={true}\n    timeout={500}\n    classNames={styles}\n    unmountOnExit\n  >\n    <div>\n      <label htmlFor=\"name\" className={styles.contactFormLabel}>\n        Find contacts by name\n      </label>\n      <input\n        type=\"text\"\n        value={filter}\n        onChange={(e) => filterRender(e.target.value)}\n      />\n    </div>\n  </CSSTransition>\n);\n\nFilterName.propTypes = {\n  filterRender: PropTypes.func.isRequired,\n  filter: PropTypes.string,\n};\n\nconst mapStateToProps = (state) => ({\n  filter: selectors.getFilter(state),\n});\n\nconst mapDispatchToProps = {\n  filterRender: listAction.filterContact,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(FilterName);\n","import React, { Component } from \"react\";\nimport ContactForm from \"./components/ContactForm/ContactForm\";\nimport ContactList from \"./components/ContactList/ContactList\";\nimport Filter from \"./components/Filter/Filter\";\nimport styles from \"./App.module.css\";\nimport { CSSTransition } from \"react-transition-group\";\nimport { connect } from \"react-redux\";\nimport contactOperations from \"./redux/contactsOperations\";\nimport selectors from \"./redux/selectors\";\n\nclass App extends Component {\n  componentDidMount() {\n    this.props.onFetchContact();\n  }\n\n  render() {\n    return (\n      <>\n        {this.props.isLoading && <h1>Loading...</h1>}\n        <CSSTransition\n          in={true}\n          appear={true}\n          timeout={500}\n          classNames={styles}\n          unmountOnExit\n        >\n          <h1 className={styles.title}>Phonebook</h1>\n        </CSSTransition>\n        <ContactForm />\n        <h2>Contacts</h2>\n        <Filter />\n        <ContactList />\n      </>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  isLoading: selectors.getLoading(state),\n});\n\nconst mapDispatchToProps = {\n  onFetchContact: contactOperations.fetchContact,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import { combineReducers } from \"redux\";\r\nimport listAction from \"./listActions\";\r\nimport { createReducer } from \"@reduxjs/toolkit\";\r\n\r\nconst newContact = (state, action) => [...state, action.payload];\r\n\r\nconst removeAnyContact = (state, action) =>\r\n  state.filter((contact) => contact.id !== action.payload);\r\n\r\nconst items = createReducer([], {\r\n  [listAction.addContactSuccess]: newContact,\r\n  [listAction.fetchContactSuccess]: (_, action) => action.payload,\r\n  [listAction.removeContactSuccess]: removeAnyContact,\r\n});\r\n\r\nconst loading = createReducer(false, {\r\n  [listAction.addContactRequest]: () => true,\r\n  [listAction.addContactSuccess]: () => false,\r\n  [listAction.addContactError]: () => false,\r\n  [listAction.fetchContactRequest]: () => true,\r\n  [listAction.fetchContactSuccess]: () => false,\r\n  [listAction.fetchContactError]: () => false,\r\n  [listAction.removeContactRequest]: () => true,\r\n  [listAction.removeContactSuccess]: () => false,\r\n  [listAction.removeContactError]: () => false,\r\n});\r\n\r\nconst filter = createReducer(\"\", {\r\n  [listAction.filterContact]: (_, action) => action.payload,\r\n});\r\n\r\nexport default combineReducers({ items, loading, filter });\r\n","import contactsReducer from \"./listReducer\";\r\nimport { configureStore } from \"@reduxjs/toolkit\";\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    contacts: contactsReducer,\r\n  },\r\n});\r\n\r\nexport default store;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport { Provider } from \"react-redux\";\nimport store from \"./redux/store\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}